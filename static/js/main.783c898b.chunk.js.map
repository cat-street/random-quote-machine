{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","data","setQuote","quoteClass","useRef","randomQuote","useCallback","a","fetch","response","json","fetchData","content","author","console","error","message","useEffect","current","id","className","TwitterButton","quote","type","onClick","props","href","target","rel","xmlns","viewBox","d","AppWrapper","store","createStore","state","action","Container","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"6TAMA,SAASA,EAAT,GAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACfC,EAAaC,iBAAO,UAElBC,EAAcC,sBAAW,sBAC7B,8BAAAC,EAAA,+EAE2BC,MAAM,kCAFjC,cAEUC,EAFV,gBAG4BA,EAASC,OAHrC,cAGUC,EAHV,gBAIUT,EAAS,CAAEU,QAASD,EAAUC,QAASC,OAAQF,EAAUE,SAJnE,gEAMIC,QAAQC,MAAR,MANJ,UAOUb,EAAS,CAAEU,QAAS,KAAMI,QAASH,OAAQ,mBAPrD,0DAUA,CAACX,IAWH,OARAe,qBAAU,WACRZ,MACC,CAACA,IAEJY,qBAAU,WACRd,EAAWe,QAAU,WACpB,CAACjB,IAGF,6BAASkB,GAAG,YAAYC,UAAWjB,EAAWe,SAC5C,gCAAYC,GAAG,SACb,uBAAGA,GAAG,QAAQlB,GAAQA,EAAKW,SAC3B,0BAAMO,GAAG,UAAUlB,GAAQA,EAAKY,QAChC,kBAACQ,EAAD,CAAeC,MAAK,WAAMrB,EAAKW,QAAX,iBAA2BX,EAAKY,UACpD,4BAAQU,KAAK,SAASJ,GAAG,YAAYK,QAASnB,GAA9C,eAQR,SAASgB,EAAcI,GACrB,OACE,uBACEC,KAAI,gDAA2CD,EAAMH,OACrDK,OAAO,SACPC,IAAI,sBACJT,GAAG,eAEH,yBACEA,GAAG,eACHU,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,igBA6CDC,MAvCf,WACE,IAeMC,EAAQC,aANO,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,MAVU,QAUNA,EAAOb,KACFa,EAAOd,MACFa,KAiBVE,EAAYC,aAZM,SAACH,GACvB,MAAO,CAAElC,KAAMkC,MAGU,SAACI,GAC1B,MAAO,CACLrC,SAAU,SAACoB,GACTiB,EAtBW,SAACjB,GAChB,MAAO,CACLC,KAJQ,MAKRD,SAmBWpB,CAASoB,QAKNgB,CAA6CtC,GAE/D,OACE,kBAAC,IAAD,CAAUiC,MAAOA,GACf,kBAACI,EAAD,QCtFcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.783c898b.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport './App.scss';\r\nimport 'normalize.css';\r\n\r\nfunction App({ data, setQuote }) {\r\n  let quoteClass = useRef('hidden');\r\n\r\n  const randomQuote = useCallback(\r\n    async function () {\r\n      try {\r\n        const response = await fetch('https://api.quotable.io/random');\r\n        const fetchData = await response.json();\r\n        await setQuote({ content: fetchData.content, author: fetchData.author });\r\n      } catch (error) {\r\n        console.error(error);\r\n        await setQuote({ content: error.message, author: 'Critical error' });\r\n      }\r\n    },\r\n    [setQuote]\r\n  );\r\n\r\n  useEffect(() => {\r\n    randomQuote();\r\n  }, [randomQuote]);\r\n\r\n  useEffect(() => {\r\n    quoteClass.current = 'active';\r\n  }, [data]);\r\n\r\n  return (\r\n    <section id=\"quote-box\" className={quoteClass.current}>\r\n      <blockquote id=\"quote\">\r\n        <p id=\"text\">{data && data.content}</p>\r\n        <cite id=\"author\">{data && data.author}</cite>\r\n        <TwitterButton quote={`\"${data.content}\"%0D~ ${data.author}`} />\r\n        <button type=\"button\" id=\"new-quote\" onClick={randomQuote}>\r\n          New quote\r\n        </button>\r\n      </blockquote>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction TwitterButton(props) {\r\n  return (\r\n    <a\r\n      href={`https://twitter.com/intent/tweet?text=${props.quote}`}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      id=\"tweet-quote\"\r\n    >\r\n      <svg\r\n        id=\"twitter-logo\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 20\"\r\n      >\r\n        <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\" />\r\n      </svg>\r\n    </a>\r\n  );\r\n}\r\n\r\nfunction AppWrapper() {\r\n  const SET = 'SET';\r\n\r\n  const setQuote = (quote) => {\r\n    return {\r\n      type: SET,\r\n      quote,\r\n    };\r\n  };\r\n\r\n  const quoteReducer = (state = {}, action) => {\r\n    if (action.type === SET) {\r\n      return action.quote;\r\n    } else return state;\r\n  };\r\n\r\n  const store = createStore(quoteReducer);\r\n\r\n  const mapStateToProps = (state) => {\r\n    return { data: state };\r\n  };\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      setQuote: (quote) => {\r\n        dispatch(setQuote(quote));\r\n      },\r\n    };\r\n  };\r\n\r\n  const Container = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Container />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default AppWrapper;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWrapper from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppWrapper />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}